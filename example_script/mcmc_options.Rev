
### Read in sequence data for the gene
data_file_name = "data/primates_and_galeopterus_cytb.nex" # input 
data = readDiscreteCharacterData(file=data_file_name) 

# Get some useful variables from the data. We need these later on.
num_taxa <- data.ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data.taxa()


mvi = 1
mni = 1


######################
# Substitution Model #
######################

# Options can be for different models

# specify the stationary frequency parameters
pi_prior <- v(1,1,1,1)  # option to change the values of this vector
pi ~ dnDirichlet(alpha=pi_prior)
moves[mvi++] = mvBetaSimplex(x=pi, weight=2.0) # option to change weight
moves[mvi++] = mvDirichletSimplex(x=pi, weight=1.0) # option to change weight
# option to add moves

# specify the exchangeability rate parameters
er_prior <- v(1,1,1,1,1,1)  # option to change the values of this vector
er ~ dnDirichlet(alpha=er_prior)
moves[mvi++] = mvBetaSimplex(x=er, weight=3.0) # option to change weight
moves[mvi++] = mvDirichletSimplex(x=er, weight=1.5) # option to change weight
# option to add moves

# create a deterministic variable for the rate matrix, GTR
Q := fnGTR(er,pi) 



##############
# Tree model #
##############

out_group = clade("Galeopterus_variegatus") # ask if outgroup is needed, user input taxon names
# Prior distribution on the tree topology
topology ~ dnUniformTopology(taxa=taxa, outgroup=out_group)
moves[mvi++] = mvNNI(tree=topology, weight=num_taxa/2.0) # option to change weight
moves[mvi++] = mvSPR(tree=topology, weight=num_taxa/10.0) # option to change weight

# Branch length prior
for (i in 1:num_branches) {
    bl[i] ~ dnExponential(lambda=10.0) # option to change argument
    moves[mvi++] = mvScale(bl[i])
}

TL := sum(x=bl)

psi := treeAssembly(topology=topology, brlens=bl)




###################
# PhyloCTMC Model #
###################

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, type="DNA")

# attach the data
seq.clamp(data)


############
# Analysis #
############

mymodel = model(x=psi)

# add monitors
monitors[mni++] = mnScreen(TL, printgen=1000)  # option to change printgen
monitors[mni++] = mnFile(psi, filename="output/primates_cytb_GTR.trees", printgen=10)  # option to change printgen and filename
monitors[mni++] = mnModel(filename="output/primates_cytb_GTR.log", printgen=10)  # option to change printgen and filename

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.run(generations=20000,tuningInterval=200)   # option to change generations and tuningInterval


# summarize output
treetrace = readTreeTrace(file="output/primates_cytb_GTR.trees", treetype="non-clock", outgroup=out_group) # options for all three args
# and then get the MAP tree
map_tree = mapTree(trace=treetrace,file="output/primates_cytb_GTR_MAP.tre") #options for args


# you may want to quit RevBayes now
q()

