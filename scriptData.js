/*Creates the RevBayes Script*/

//Makes a RevBayes Title Tag with the given string
function revbayesTag(word){
    var tempword ="# " + word + " #";
    var temp = "";
    var i;
    for(i = 0; i < word.length + 4; i++){
        temp = temp + "#";
    }

    var words = [temp, tempword, temp];
    return word = words.join('\n');
}

//creates the script that will be generated.
function createScript(){
    var authorTag = "###Script analysis generated by RevScripter###";
    var generatedScript = "";
   
    //This default code before substitution options
    var variables = "# Get some useful variables from the data. We need these later on.\n" +
                    "num_taxa <- data.ntaxa()\n" +
                    "num_branches <- 2 * num_taxa - 3\n" +
                    "taxa <- data.taxa()\n\n"+
                    "moves    = VectorMoves()\n" +
                    "monitors = VectorMonitors()\n\n" +
                    "num_char_states <- 4";




    //Creates the scripts from the model
    //Data script
    var dataoptions = getdataOptions();
    //Substitution header/tag
    var substitutionmodelTag = revbayesTag("Substitution Model");
    //Substitution script
    var substitutionModel = getSubstitutionOptions();
    //Tree header/tag
    var treeTag = revbayesTag("Tree Model");
    //Tree script
    var treeModel = getTreeOptions();
    //MCMC header/tag
    var mcmcTag = revbayesTag("MCMC");
    //MCMC script
    var mcmc = getMCMCOptions();

    //Makes an array with each script from each section
    var scripts = [authorTag, dataoptions, variables, substitutionmodelTag, substitutionModel, treeTag, treeModel, mcmcTag, mcmc];
   
    //Checks to see if there are any missing inputs that the user needs to choose from
    if(!dataoptions){
        generatedScript = "Missing inputs in the DATA options.";
        alert("Missing inputs in the DATA options.");
    }
    else if(!substitutionModel){
        generatedScript = "Missing inputs in the Substitution Model options.";
        alert("Missing inputs in the Substitution Model options.");
    }
    else if(!treeModel){
        generatedScript = "Missing inputs in the Tree Model options.";
        alert("Missing inputs in the Tree Model options.");
    }
    else if(!mcmc){
        generatedScript = "Missing inputs in the MCMC options.";
        alert("Missing inputs in the MCMC options.");
    }
    else{
        //Joins the scripts to one string
        generatedScript = scripts.join('\n\n');
    }

    //Returns the string
    return generatedScript;

}

//Resets the script
function resetScript(){
    //Cahnges text area of script 
    document.getElementById('scriptBox').value = "Generated script goes here.";
    
    //Resets each options
    createdataOptions();
    createModelOptions();
    createTreeOptions();
    createMCMCOptions();

    //Goes back to home tab
    gotoTab('hometab');
}

//Puts the script into the text area
function generateScript(){
    //Changes text area of script to script
    document.getElementById('scriptBox').value = createScript(); 
}

//Copies the script to the clipboard of the user
function copyScript(){
 /* Get the text field */
  var copyText =  document.getElementById('scriptBox');

  /* Select the text field */
  copyText.select();

  /* Copy the text inside the text field */
  document.execCommand("copy");

  /* Alert the copied text */
  alert("Script has been copied to clipboard.");
}

//Makes a text file of the generated script, that a user can download
function downloadScript(){
    download("revscript", document.getElementById('scriptBox').value);

    /* Alert the copied text */
  alert("Script has been downloaded.");
}

//function dowloads the file to the users computer
function download(filename, text) {
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);
  
    element.style.display = 'none';
    document.body.appendChild(element);
  
    element.click();
  
    document.body.removeChild(element);
}